{"ast":null,"code":"var _jsxFileName = \"/Users/radhika.bajaj/Documents/GitHub/Knowledge-Graph-Frontend/src/components/ForceGraphGenerator.js\",\n  _s = $RefreshSig$();\nimport * as d3 from \"d3\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RunForceGraph = ({\n  graph,\n  svgContainer\n}) => {\n  _s();\n  const d3Container = useRef(null);\n\n  // State to track width and height of SVG Container\n  const [width, setWidth] = useState();\n  const [height, setHeight] = useState();\n  const [mousePosition, setMousePosition] = useState({\n    x: null,\n    y: null\n  });\n\n  // This function calculates width and height of the container\n  const getSvgContainerSize = () => {\n    const newWidth = svgContainer.current.clientWidth - 128;\n    setWidth(newWidth);\n    const newHeight = svgContainer.current.clientHeight;\n    setHeight(newHeight);\n  };\n  useEffect(() => {\n    // detect 'width' and 'height' on render\n    getSvgContainerSize();\n    // listen for resize changes, and detect dimensions again when they change\n    window.addEventListener(\"resize\", getSvgContainerSize);\n    // cleanup event listener\n    return () => window.removeEventListener(\"resize\", getSvgContainerSize);\n  }, []);\n  useEffect(() => {\n    const updateMousePosition = ev => {\n      setMousePosition({\n        x: ev.clientX,\n        y: ev.clientY\n      });\n    };\n    window.addEventListener('mousemove', updateMousePosition);\n    return () => {\n      window.removeEventListener('mousemove', updateMousePosition);\n    };\n  }, []);\n  useEffect(() => {\n    if (graph.links && graph.nodes) {\n      const links = graph.links.map(d => Object.assign({}, d));\n      const nodes = graph.nodes.map(d => Object.assign({}, d));\n      const color = () => {\n        return \"#fc9f42\";\n      };\n      const drag = simulation => {\n        const dragstarted = d => {\n          if (!d3.event.active) simulation.alpha(0.3).restart();\n          d.fx = d.x;\n          d.fy = d.y;\n        };\n        const dragged = d => {\n          d.fx = d3.event.x;\n          d.fy = d3.event.y;\n        };\n        const dragended = d => {\n          if (!d3.event.active) simulation.alpha(0).restart();\n          d.fx = null;\n          d.fy = null;\n        };\n        return d3.drag().on(\"start\", dragstarted).on(\"drag\", dragged).on(\"end\", dragended);\n      };\n      const simulation = d3.forceSimulation(nodes).force(\"link\", d3.forceLink(links).id(d => d.id).distance(200)).force(\"charge\", d3.forceManyBody().strength(-1000)).force(\"collide\", d3.forceCollide().strength(1).radius(180).iterations(1)).force(\"x\", d3.forceX()).force(\"y\", d3.forceY());\n      d3.select(d3Container.current).selectAll(\"*\").remove();\n      const svg = d3.select(d3Container.current).attr(\"viewBox\", [-width / 2, -height / 2, width, height]).call(d3.zoom().on(\"zoom\", function () {\n        svg.attr(\"transform\", d3.event.transform);\n      })).append(\"g\");\n\n      //   .scaleExtent([0, 5])\n      //   .translateExtent([[0, 0], [width, height]])\n\n      // svg.selectAll(\"*\").remove();\n\n      // const tooltip = d3\n      //   .select(\"body\")\n      //   .append(\"div\") // the tooltip always \"exists\" as its own html div, even when not visible\n      //   .style(\"position\", \"absolute\") // the absolute position is necessary so that we can manually define its position later\n      //   .style(\"visibility\", \"hidden\") // hide it from default at the start so it only appears on hover\n      //   .style(\"background-color\", \"white\")\n      //   .attr(\"fill\", \"white\")\n      //   .attr(\"font-family\", \"sans-serif\")\n      //   .attr(\"padding\", \"5px\")\n      //   .attr(\"border-radius\", \"5px\")\n      //   .attr(\"border\", \"1px solid grey\");\n\n      // const tooltip_in = (event, d) => { // pass event and d to this function so that it can access d for our data\n      //   tooltip\n      //     .html(\"<h4>\" + d.id + \"</h4>\") // add an html element with a header tag containing the name of the node.  This line is where you would add additional information like: \"<h4>\" + d.name + \"</h4></br><p>\" + d.type + \"</p>\"  Note the quote marks, pluses and </br>--these are necessary for javascript to put all the data and strings within quotes together properly.  Any text needs to be all one line in .html() here\n      //     .style(\"visibility\", \"visible\") // make the tooltip visible on hover\n      //     .style(\"top\", event.pageY + \"px\") // position the tooltip with its top at the same pixel location as the mouse on the screen\n      //     .style(\"left\", event.pageX + \"px\"); // position the tooltip just to the right of the mouse location\n      // }\n\n      // const tooltip_out = () => {\n      //   tooltip\n      //     .transition()\n      //     .duration(50) // give the hide behavior a 50 milisecond delay so that it doesn't jump around as the network moves\n      //     .style(\"visibility\", \"hidden\"); // hide the tooltip when the mouse stops hovering\n      // }\n\n      // tooltip div:\n      const tooltip = d3.select(\"body\").append(\"div\").style(\"position\", \"absolute\").style(\"visibility\", \"hidden\").style(\"background-color\", \"white\").style(\"border\", \"solid\").style(\"border-width\", \"1px\").style(\"border-radius\", \"5px\").style(\"padding\", \"10px\").html(\"<b>Id:</b><br><b>Labels:</b><br><b>ImportId:</b><br><b>Name:</b><br>\");\n      const updateLink = svg.selectAll(\"line\").data(links).join(\"line\").attr(\"stroke\", \"#999\").attr(\"stroke-opacity\", 0.6).attr(\"stroke-width\", d => Math.sqrt(d.value));\n      const updateNode = svg.selectAll(\"circle\").data(nodes).join(\"circle\").attr(\"stroke\", \"#ff8103\").attr(\"stroke-width\", 2).attr(\"r\", 54).attr(\"fill\", color).on(\"mouseover\", function () {\n        tooltip.style(\"visibility\", \"visible\");\n      }).on(\"mousemove\", function () {\n        tooltip.style(\"top\", mousePosition.y + \"px\").style(\"left\", mousePosition.x + \"px\");\n      }).on(\"mouseleave\", function () {\n        tooltip.style(\"visibility\", \"hidden\");\n      }).call(drag(simulation));\n      const updateLabel = svg.selectAll(\"text\").data(nodes).join(\"text\").attr(\"class\", \"labels\").attr('text-anchor', 'middle').attr('dominant-baseline', 'central').text(d => {\n        return d.properties.neo4jImportId;\n      }).call(drag(simulation));\n      simulation.on(\"tick\", () => {\n        // update link positions\n        updateLink.attr(\"x1\", d => d.source.x).attr(\"y1\", d => d.source.y).attr(\"x2\", d => d.target.x).attr(\"y2\", d => d.target.y);\n\n        // update node positions\n        updateNode.attr(\"cx\", d => d.x).attr(\"cy\", d => d.y);\n\n        // update label positions\n        updateLabel.attr(\"x\", d => {\n          return d.x;\n        }).attr(\"y\", d => {\n          return d.y;\n        });\n      });\n\n      // updateLink.exit().remove();\n      // updateNode.exit().remove();\n      // updateLabel.exit().remove();\n    }\n  }, [graph, width, height]);\n  return (\n    /*#__PURE__*/\n    // destroy: () => {\n    //   simulation.stop();\n    // },\n    // nodes: () => {\n    //   return svg.node();\n    // }\n    _jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      ref: d3Container\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(RunForceGraph, \"Th+nDBDyeyJgx6hm+kxJftPpmAE=\");\n_c = RunForceGraph;\nexport default RunForceGraph;\nvar _c;\n$RefreshReg$(_c, \"RunForceGraph\");","map":{"version":3,"names":["d3","useEffect","useState","useRef","jsxDEV","_jsxDEV","RunForceGraph","graph","svgContainer","_s","d3Container","width","setWidth","height","setHeight","mousePosition","setMousePosition","x","y","getSvgContainerSize","newWidth","current","clientWidth","newHeight","clientHeight","window","addEventListener","removeEventListener","updateMousePosition","ev","clientX","clientY","links","nodes","map","d","Object","assign","color","drag","simulation","dragstarted","event","active","alpha","restart","fx","fy","dragged","dragended","on","forceSimulation","force","forceLink","id","distance","forceManyBody","strength","forceCollide","radius","iterations","forceX","forceY","select","selectAll","remove","svg","attr","call","zoom","transform","append","tooltip","style","html","updateLink","data","join","Math","sqrt","value","updateNode","updateLabel","text","properties","neo4jImportId","source","target","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/radhika.bajaj/Documents/GitHub/Knowledge-Graph-Frontend/src/components/ForceGraphGenerator.js"],"sourcesContent":["\nimport * as d3 from \"d3\";\nimport { useEffect, useState, useRef } from \"react\";\nexport const RunForceGraph = ( {graph, svgContainer} ) => { \n  const d3Container = useRef(null);\n  \n\n  // State to track width and height of SVG Container\n  const [width, setWidth] = useState();\n  const [height, setHeight] = useState();\n  const [mousePosition, setMousePosition ] = useState({ x: null, y: null });\n\n  // This function calculates width and height of the container\n  const getSvgContainerSize = () => {\n    const newWidth = svgContainer.current.clientWidth - 128;\n    setWidth(newWidth);\n\n    const newHeight = svgContainer.current.clientHeight;\n    setHeight(newHeight);\n  };\n\n  useEffect(() => {\n    // detect 'width' and 'height' on render\n    getSvgContainerSize();\n    // listen for resize changes, and detect dimensions again when they change\n    window.addEventListener(\"resize\", getSvgContainerSize);\n    // cleanup event listener\n    return () => window.removeEventListener(\"resize\", getSvgContainerSize);\n  }, []);\n\n  \n  useEffect(() => {\n    const updateMousePosition = ev => {\n      setMousePosition({ x: ev.clientX, y: ev.clientY });\n    };\n    window.addEventListener('mousemove', updateMousePosition);\n    return () => {\n      window.removeEventListener('mousemove', updateMousePosition);\n    };\n  }, []);\n\n  useEffect(() => { \n    if (graph.links && graph.nodes) {\n\n\n      const links = graph.links.map((d) => Object.assign({}, d));\n      const nodes = graph.nodes.map((d) => Object.assign({}, d));\n\n      const color = () => { return \"#fc9f42\"; };\n\n      const drag = (simulation) => {\n        const dragstarted = (d) => {\n          if (!d3.event.active) simulation.alpha(0.3).restart();\n          d.fx = d.x;\n          d.fy = d.y;\n        };\n\n        const dragged = (d) => {\n          d.fx = d3.event.x;\n          d.fy = d3.event.y;\n        };\n\n        const dragended = (d) => {\n          if (!d3.event.active) simulation.alpha(0).restart();\n          d.fx = null;\n          d.fy = null;\n        };\n\n        return d3\n          .drag()\n          .on(\"start\", dragstarted)\n          .on(\"drag\", dragged)\n          .on(\"end\", dragended);\n      };\n      \n      const simulation = d3\n        .forceSimulation(nodes)\n        .force(\"link\", d3.forceLink(links).id(d => d.id).distance(200))\n        .force(\"charge\", d3.forceManyBody().strength(-1000))\n        .force(\"collide\", d3.forceCollide().strength(1).radius(180).iterations(1))\n        .force(\"x\", d3.forceX())\n        .force(\"y\", d3.forceY());\n\n      d3.select(d3Container.current).selectAll(\"*\").remove();\n        \n      const svg = d3\n        .select(d3Container.current)\n        .attr(\"viewBox\", [-width / 2, -height / 2, width, height])\n        .call(d3.zoom().on(\"zoom\", function () {\n          svg.attr(\"transform\", d3.event.transform);\n      })).append(\"g\");\n\n\t    //   .scaleExtent([0, 5])\n\t    //   .translateExtent([[0, 0], [width, height]])\n\n      // svg.selectAll(\"*\").remove();\n\n      // const tooltip = d3\n      //   .select(\"body\")\n      //   .append(\"div\") // the tooltip always \"exists\" as its own html div, even when not visible\n      //   .style(\"position\", \"absolute\") // the absolute position is necessary so that we can manually define its position later\n      //   .style(\"visibility\", \"hidden\") // hide it from default at the start so it only appears on hover\n      //   .style(\"background-color\", \"white\")\n      //   .attr(\"fill\", \"white\")\n      //   .attr(\"font-family\", \"sans-serif\")\n      //   .attr(\"padding\", \"5px\")\n      //   .attr(\"border-radius\", \"5px\")\n      //   .attr(\"border\", \"1px solid grey\");\n\n      // const tooltip_in = (event, d) => { // pass event and d to this function so that it can access d for our data\n      //   tooltip\n      //     .html(\"<h4>\" + d.id + \"</h4>\") // add an html element with a header tag containing the name of the node.  This line is where you would add additional information like: \"<h4>\" + d.name + \"</h4></br><p>\" + d.type + \"</p>\"  Note the quote marks, pluses and </br>--these are necessary for javascript to put all the data and strings within quotes together properly.  Any text needs to be all one line in .html() here\n      //     .style(\"visibility\", \"visible\") // make the tooltip visible on hover\n      //     .style(\"top\", event.pageY + \"px\") // position the tooltip with its top at the same pixel location as the mouse on the screen\n      //     .style(\"left\", event.pageX + \"px\"); // position the tooltip just to the right of the mouse location\n      // }\n\n      // const tooltip_out = () => {\n      //   tooltip\n      //     .transition()\n      //     .duration(50) // give the hide behavior a 50 milisecond delay so that it doesn't jump around as the network moves\n      //     .style(\"visibility\", \"hidden\"); // hide the tooltip when the mouse stops hovering\n      // }\n\n              // tooltip div:\n      const tooltip = d3.select(\"body\")\n        .append(\"div\")\n        .style(\"position\", \"absolute\")\n        .style(\"visibility\", \"hidden\")\n        .style(\"background-color\", \"white\")\n        .style(\"border\", \"solid\")\n        .style(\"border-width\", \"1px\")\n        .style(\"border-radius\", \"5px\")\n        .style(\"padding\", \"10px\")\n        .html(\"<b>Id:</b><br><b>Labels:</b><br><b>ImportId:</b><br><b>Name:</b><br>\");\n        \n\n      const updateLink = svg\n        .selectAll(\"line\")\n        .data(links)\n        .join(\"line\")\n        .attr(\"stroke\", \"#999\")\n        .attr(\"stroke-opacity\", 0.6)\n        .attr(\"stroke-width\", d => Math.sqrt(d.value));\n\n      const updateNode = svg\n        .selectAll(\"circle\")\n        .data(nodes)\n        .join(\"circle\")\n        .attr(\"stroke\", \"#ff8103\")\n        .attr(\"stroke-width\", 2)\n        .attr(\"r\", 54)\n        .attr(\"fill\", color)\n        .on(\"mouseover\", function() {\n          tooltip.style(\"visibility\", \"visible\");\n        })\n        .on(\"mousemove\", function() {\n          tooltip\n          .style(\"top\", mousePosition.y + \"px\")\n          .style(\"left\", mousePosition.x + \"px\")\n        })\n        .on(\"mouseleave\", function() {\n          tooltip.style(\"visibility\", \"hidden\");\n        })\n        .call(drag(simulation));\n\n      const updateLabel = svg\n        .selectAll(\"text\")\n        .data(nodes)\n        .join(\"text\")\n        .attr(\"class\", \"labels\")\n        .attr('text-anchor', 'middle')\n        .attr('dominant-baseline', 'central')\n        .text(d => {return d.properties.neo4jImportId;})\n        .call(drag(simulation));\n\n\n      simulation.on(\"tick\", () => {\n\n        // update link positions\n        updateLink\n          .attr(\"x1\", d => d.source.x)\n          .attr(\"y1\", d => d.source.y)\n          .attr(\"x2\", d => d.target.x)\n          .attr(\"y2\", d => d.target.y);\n\n        // update node positions\n        updateNode\n          .attr(\"cx\", d => d.x)\n          .attr(\"cy\", d => d.y);\n\n        // update label positions\n        updateLabel\n          .attr(\"x\", d => { return d.x; })\n          .attr(\"y\", d => { return d.y; })\n      });\n      \n      // updateLink.exit().remove();\n      // updateNode.exit().remove();\n      // updateLabel.exit().remove();\n      \n    }\n\n    \n  }, [graph, width, height])\n\n  return (\n    // destroy: () => {\n    //   simulation.stop();\n    // },\n    // nodes: () => {\n    //   return svg.node();\n    // }\n    <svg width={width} height={height} ref={d3Container}/>\n    \n  );\n}\n\nexport default RunForceGraph;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}