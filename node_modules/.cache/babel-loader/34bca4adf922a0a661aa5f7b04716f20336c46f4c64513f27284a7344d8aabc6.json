{"ast":null,"code":"var _jsxFileName = \"/Users/radhika.bajaj/Documents/GitHub/Knowledge-Graph-Frontend/src/components/NetworkDiagram.js\",\n  _s = $RefreshSig$();\nimport * as d3 from 'd3';\nimport { useEffect, useRef } from 'react';\nimport DrawNetwork from './DrawNetwork';\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NetworkDiagram = ({\n  graph\n}) => {\n  _s();\n  // The force simulation mutates links and nodes, so create a copy first\n  // Node positions are initialized by d3\n  const RADIUS = 40;\n  const links = graph.links.map(d => ({\n    ...d\n  }));\n  const nodes = graph.nodes.map(d => ({\n    ...d\n  }));\n  const canvasRef = useRef(null);\n  const divRef = useRef(null);\n  const {\n    height,\n    width\n  } = useDimensions(divRef);\n  useEffect(() => {\n    // set dimension of the canvas element\n    const canvas = canvasRef.current;\n    const context = canvas === null || canvas === void 0 ? void 0 : canvas.getContext('2d');\n    if (!context) {\n      return;\n    }\n\n    // run d3-force to find the position of nodes on the canvas\n    d3.forceSimulation(nodes)\n\n    // list of forces we apply to get node positions\n    .force('link', d3.forceLink(links).id(d => d.id)).force('collide', d3.forceCollide().radius(RADIUS)).force('charge', d3.forceManyBody()).force('center', d3.forceCenter(width / 2, height / 2))\n\n    // at each iteration of the simulation, draw the network diagram with the new node positions\n    .on('tick', () => {\n      DrawNetwork(context, width, height, nodes, links, RADIUS);\n    });\n  }, [width, height, nodes, links]);\n  return /*#__PURE__*/_jsxDEV(TransformWrapper, {\n    children: /*#__PURE__*/_jsxDEV(TransformComponent, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasRef,\n          style: {\n            width: width,\n            height: height,\n            backgroundColor: \"#F2F1F1\"\n          },\n          width: width,\n          height: height\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_s(NetworkDiagram, \"QT3knDl8VDhs4lR6KUTdx0WzxwU=\", true);\n_c = NetworkDiagram;\nvar _c;\n$RefreshReg$(_c, \"NetworkDiagram\");","map":{"version":3,"names":["d3","useEffect","useRef","DrawNetwork","TransformWrapper","TransformComponent","jsxDEV","_jsxDEV","NetworkDiagram","graph","_s","RADIUS","links","map","d","nodes","canvasRef","divRef","height","width","useDimensions","canvas","current","context","getContext","forceSimulation","force","forceLink","id","forceCollide","radius","forceManyBody","forceCenter","on","children","ref","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/radhika.bajaj/Documents/GitHub/Knowledge-Graph-Frontend/src/components/NetworkDiagram.js"],"sourcesContent":["import * as d3 from 'd3';\nimport { useEffect, useRef } from 'react';\nimport DrawNetwork from './DrawNetwork';\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\n\nexport const NetworkDiagram = ({graph}) => {\n  // The force simulation mutates links and nodes, so create a copy first\n  // Node positions are initialized by d3\n  const RADIUS = 40;\n  const links = graph.links.map((d) => ({ ...d }));\n  const nodes = graph.nodes.map((d) => ({ ...d }));\n\n\n\n  const canvasRef = useRef(null);\n  const divRef = useRef(null);\n  const { height, width} = useDimensions(divRef);\n  \n\n  useEffect(() => {\n    // set dimension of the canvas element\n    const canvas = canvasRef.current;\n    const context = canvas?.getContext('2d');\n\n    if (!context) {\n      return;\n    }\n\n    // run d3-force to find the position of nodes on the canvas\n    d3.forceSimulation(nodes)\n\n      // list of forces we apply to get node positions\n      .force(\n        'link',\n        d3.forceLink(links).id((d) => d.id)\n      )\n      .force('collide', d3.forceCollide().radius(RADIUS))\n      .force('charge', d3.forceManyBody())\n      .force('center', d3.forceCenter(width / 2, height / 2))\n\n      // at each iteration of the simulation, draw the network diagram with the new node positions\n      .on('tick', () => {\n        DrawNetwork(context, width, height, nodes, links, RADIUS);\n      });\n  }, [width, height, nodes, links]);\n\n    \n    return (\n        <TransformWrapper>\n            <TransformComponent>\n                <div>\n                <canvas\n                    ref={canvasRef}\n                    style={{\n                    width: width,\n                    height: height,\n                    backgroundColor: \"#F2F1F1\"\n                    }}\n                    width={width}\n                    height={height}\n                />\n                </div>\n            </TransformComponent>\n        </TransformWrapper>\n        \n    );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}