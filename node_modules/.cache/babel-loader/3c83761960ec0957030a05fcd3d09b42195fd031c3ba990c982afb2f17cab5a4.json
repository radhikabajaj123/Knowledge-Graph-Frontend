{"ast":null,"code":"var _jsxFileName = \"/Users/radhika.bajaj/Documents/GitHub/Knowledge-Graph-Frontend/src/components/NetworkDiagram.js\",\n  _s2 = $RefreshSig$();\nimport * as d3 from 'd3';\nimport { useEffect, useRef } from 'react';\nimport DrawNetwork from './DrawNetwork';\nimport useDimension from \"./useDimension\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NetworkDiagram = ({\n  graph\n}) => {\n  _s2();\n  var _s = $RefreshSig$();\n  // The force simulation mutates links and nodes, so create a copy first\n  // Node positions are initialized by d3\n  const RADIUS = 40;\n  const links = graph.links.map(d => ({\n    ...d\n  }));\n  const nodes = graph.nodes.map(d => ({\n    ...d\n  }));\n  const canvasRef = useRef(null);\n  _s(useEffect(_s(() => {\n    _s();\n    // set dimension of the canvas element\n    const {\n      height,\n      width\n    } = useDimension(canvasRef);\n    const canvas = canvasRef.current;\n    const context = canvas === null || canvas === void 0 ? void 0 : canvas.getContext('2d');\n    if (!context) {\n      return;\n    }\n\n    // run d3-force to find the position of nodes on the canvas\n    d3.forceSimulation(nodes)\n\n    // list of forces we apply to get node positions\n    .force('link', d3.forceLink(links).id(d => d.id)).force('collide', d3.forceCollide().radius(RADIUS)).force('charge', d3.forceManyBody()).force('center', d3.forceCenter(width / 2, height / 2))\n\n    // at each iteration of the simulation, draw the network diagram with the new node positions\n    .on('tick', () => {\n      DrawNetwork(context, width, height, nodes, links, RADIUS);\n    });\n  }, \"QaSKGbKo/tsU7T733zxcofloVKw=\", false, function () {\n    return [useDimension];\n  }), [width, height, nodes, links]), \"QaSKGbKo/tsU7T733zxcofloVKw=\", false, function () {\n    return [useDimension];\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width: width,\n        height: height,\n        backgroundColor: \"#F2F1F1\"\n      },\n      width: width,\n      height: height\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s2(NetworkDiagram, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = NetworkDiagram;\nvar _c;\n$RefreshReg$(_c, \"NetworkDiagram\");","map":{"version":3,"names":["d3","useEffect","useRef","DrawNetwork","useDimension","jsxDEV","_jsxDEV","NetworkDiagram","graph","_s2","_s","$RefreshSig$","RADIUS","links","map","d","nodes","canvasRef","height","width","canvas","current","context","getContext","forceSimulation","force","forceLink","id","forceCollide","radius","forceManyBody","forceCenter","on","children","ref","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/radhika.bajaj/Documents/GitHub/Knowledge-Graph-Frontend/src/components/NetworkDiagram.js"],"sourcesContent":["import * as d3 from 'd3';\nimport { useEffect, useRef } from 'react';\nimport DrawNetwork from './DrawNetwork';\nimport useDimension from \"./useDimension\";\n\nexport const NetworkDiagram = ({graph}) => {\n  // The force simulation mutates links and nodes, so create a copy first\n  // Node positions are initialized by d3\n  const RADIUS = 40;\n  const links = graph.links.map((d) => ({ ...d }));\n  const nodes = graph.nodes.map((d) => ({ ...d }));\n\n\n\n  const canvasRef = useRef(null);\n  \n\n  useEffect(() => {\n    // set dimension of the canvas element\n    const { height, width } = useDimension(canvasRef);\n    const canvas = canvasRef.current;\n    const context = canvas?.getContext('2d');\n\n    if (!context) {\n      return;\n    }\n\n    // run d3-force to find the position of nodes on the canvas\n    d3.forceSimulation(nodes)\n\n      // list of forces we apply to get node positions\n      .force(\n        'link',\n        d3.forceLink(links).id((d) => d.id)\n      )\n      .force('collide', d3.forceCollide().radius(RADIUS))\n      .force('charge', d3.forceManyBody())\n      .force('center', d3.forceCenter(width / 2, height / 2))\n\n      // at each iteration of the simulation, draw the network diagram with the new node positions\n      .on('tick', () => {\n        DrawNetwork(context, width, height, nodes, links, RADIUS);\n      });\n  }, [width, height, nodes, links]);\n\n  return (\n    <div>\n      <canvas\n        ref={canvasRef}\n        style={{\n          width: width,\n          height: height,\n          backgroundColor: \"#F2F1F1\"\n        }}\n        width={width}\n        height={height}\n      />\n    </div>\n  );\n};\n"],"mappings":";;AAAA,OAAO,KAAKA,EAAE,MAAM,IAAI;AACxB,SAASC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,OAAO,MAAMC,cAAc,GAAGA,CAAC;EAACC;AAAK,CAAC,KAAK;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EACzC;EACA;EACA,MAAMC,MAAM,GAAG,EAAE;EACjB,MAAMC,KAAK,GAAGL,KAAK,CAACK,KAAK,CAACC,GAAG,CAAEC,CAAC,KAAM;IAAE,GAAGA;EAAE,CAAC,CAAC,CAAC;EAChD,MAAMC,KAAK,GAAGR,KAAK,CAACQ,KAAK,CAACF,GAAG,CAAEC,CAAC,KAAM;IAAE,GAAGA;EAAE,CAAC,CAAC,CAAC;EAIhD,MAAME,SAAS,GAAGf,MAAM,CAAC,IAAI,CAAC;EAG9BQ,EAAA,CAAAT,SAAS,CAAAS,EAAA,CAAC,MAAM;IAAAA,EAAA;IACd;IACA,MAAM;MAAEQ,MAAM;MAAEC;IAAM,CAAC,GAAGf,YAAY,CAACa,SAAS,CAAC;IACjD,MAAMG,MAAM,GAAGH,SAAS,CAACI,OAAO;IAChC,MAAMC,OAAO,GAAGF,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEG,UAAU,CAAC,IAAI,CAAC;IAExC,IAAI,CAACD,OAAO,EAAE;MACZ;IACF;;IAEA;IACAtB,EAAE,CAACwB,eAAe,CAACR,KAAK;;IAEtB;IAAA,CACCS,KAAK,CACJ,MAAM,EACNzB,EAAE,CAAC0B,SAAS,CAACb,KAAK,CAAC,CAACc,EAAE,CAAEZ,CAAC,IAAKA,CAAC,CAACY,EAAE,CACpC,CAAC,CACAF,KAAK,CAAC,SAAS,EAAEzB,EAAE,CAAC4B,YAAY,CAAC,CAAC,CAACC,MAAM,CAACjB,MAAM,CAAC,CAAC,CAClDa,KAAK,CAAC,QAAQ,EAAEzB,EAAE,CAAC8B,aAAa,CAAC,CAAC,CAAC,CACnCL,KAAK,CAAC,QAAQ,EAAEzB,EAAE,CAAC+B,WAAW,CAACZ,KAAK,GAAG,CAAC,EAAED,MAAM,GAAG,CAAC,CAAC;;IAEtD;IAAA,CACCc,EAAE,CAAC,MAAM,EAAE,MAAM;MAChB7B,WAAW,CAACmB,OAAO,EAAEH,KAAK,EAAED,MAAM,EAAEF,KAAK,EAAEH,KAAK,EAAED,MAAM,CAAC;IAC3D,CAAC,CAAC;EACN,CAAC;IAAA,QAxB2BR,YAAY;EAAA,IAwBrC,CAACe,KAAK,EAAED,MAAM,EAAEF,KAAK,EAAEH,KAAK,CAAC,CAAC;IAAA,QAxBLT,YAAY;EAAA;EA0BxC,oBACEE,OAAA;IAAA2B,QAAA,eACE3B,OAAA;MACE4B,GAAG,EAAEjB,SAAU;MACfkB,KAAK,EAAE;QACLhB,KAAK,EAAEA,KAAK;QACZD,MAAM,EAAEA,MAAM;QACdkB,eAAe,EAAE;MACnB,CAAE;MACFjB,KAAK,EAAEA,KAAM;MACbD,MAAM,EAAEA;IAAO;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC/B,GAAA,CAtDWF,cAAc;AAAAkC,EAAA,GAAdlC,cAAc;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}