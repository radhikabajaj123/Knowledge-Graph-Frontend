{"ast":null,"code":"var _jsxFileName = \"/Users/radhika.bajaj/Documents/GitHub/Knowledge-Graph-Frontend/src/components/NetworkDiagram.js\",\n  _s = $RefreshSig$();\nimport * as d3 from 'd3';\nimport { useEffect, useRef } from 'react';\nimport DrawNetwork from './DrawNetwork';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NetworkDiagram = ({\n  graph,\n  width,\n  height\n}) => {\n  _s();\n  // The force simulation mutates links and nodes, so create a copy first\n  // Node positions are initialized by d3\n  const RADIUS = 40;\n  const links = graph.links.map(d => ({\n    ...d\n  }));\n  const nodes = graph.nodes.map(d => ({\n    ...d\n  }));\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    // set dimension of the canvas element\n    const canvas = canvasRef.current;\n    const context = canvas === null || canvas === void 0 ? void 0 : canvas.getContext('2d');\n    if (!context) {\n      return;\n    }\n\n    // run d3-force to find the position of nodes on the canvas\n    d3.forceSimulation(nodes)\n\n    // list of forces we apply to get node positions\n    .force('link', d3.forceLink(links).id(d => d.id)).force('collide', d3.forceCollide().radius(RADIUS)).force('charge', d3.forceManyBody()).force('center', d3.forceCenter(width / 2, height / 2))\n\n    // at each iteration of the simulation, draw the network diagram with the new node positions\n    .on('tick', () => {\n      DrawNetwork(context, width, height, nodes, links, RADIUS);\n    });\n  }, [width, height, nodes, links]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width: width,\n        height: height,\n        backgroundColor: \"#F2F1F1\"\n      },\n      width: width,\n      height: height\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(NetworkDiagram, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = NetworkDiagram;\nvar _c;\n$RefreshReg$(_c, \"NetworkDiagram\");","map":{"version":3,"names":["d3","useEffect","useRef","DrawNetwork","jsxDEV","_jsxDEV","NetworkDiagram","graph","width","height","_s","RADIUS","links","map","d","nodes","canvasRef","canvas","current","context","getContext","forceSimulation","force","forceLink","id","forceCollide","radius","forceManyBody","forceCenter","on","children","ref","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/radhika.bajaj/Documents/GitHub/Knowledge-Graph-Frontend/src/components/NetworkDiagram.js"],"sourcesContent":["import * as d3 from 'd3';\nimport { useEffect, useRef } from 'react';\nimport DrawNetwork from './DrawNetwork';\n\nexport const NetworkDiagram = ({graph, width, height}) => {\n  // The force simulation mutates links and nodes, so create a copy first\n  // Node positions are initialized by d3\n  const RADIUS = 40;\n  const links = graph.links.map((d) => ({ ...d }));\n  const nodes = graph.nodes.map((d) => ({ ...d }));\n\n\n\n  const canvasRef = useRef(null);\n  \n\n  useEffect(() => {\n    // set dimension of the canvas element\n    const canvas = canvasRef.current;\n    const context = canvas?.getContext('2d');\n\n    if (!context) {\n      return;\n    }\n\n    // run d3-force to find the position of nodes on the canvas\n    d3.forceSimulation(nodes)\n\n      // list of forces we apply to get node positions\n      .force(\n        'link',\n        d3.forceLink(links).id((d) => d.id)\n      )\n      .force('collide', d3.forceCollide().radius(RADIUS))\n      .force('charge', d3.forceManyBody())\n      .force('center', d3.forceCenter(width / 2, height / 2))\n\n      // at each iteration of the simulation, draw the network diagram with the new node positions\n      .on('tick', () => {\n        DrawNetwork(context, width, height, nodes, links, RADIUS);\n      });\n  }, [width, height, nodes, links]);\n\n  return (\n    <div>\n      <canvas\n        ref={canvasRef}\n        style={{\n          width: width,\n          height: height,\n          backgroundColor: \"#F2F1F1\"\n        }}\n        width={width}\n        height={height}\n      />\n    </div>\n  );\n};\n"],"mappings":";;AAAA,OAAO,KAAKA,EAAE,MAAM,IAAI;AACxB,SAASC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,OAAO,MAAMC,cAAc,GAAGA,CAAC;EAACC,KAAK;EAAEC,KAAK;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EACxD;EACA;EACA,MAAMC,MAAM,GAAG,EAAE;EACjB,MAAMC,KAAK,GAAGL,KAAK,CAACK,KAAK,CAACC,GAAG,CAAEC,CAAC,KAAM;IAAE,GAAGA;EAAE,CAAC,CAAC,CAAC;EAChD,MAAMC,KAAK,GAAGR,KAAK,CAACQ,KAAK,CAACF,GAAG,CAAEC,CAAC,KAAM;IAAE,GAAGA;EAAE,CAAC,CAAC,CAAC;EAIhD,MAAME,SAAS,GAAGd,MAAM,CAAC,IAAI,CAAC;EAG9BD,SAAS,CAAC,MAAM;IACd;IACA,MAAMgB,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,MAAMC,OAAO,GAAGF,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEG,UAAU,CAAC,IAAI,CAAC;IAExC,IAAI,CAACD,OAAO,EAAE;MACZ;IACF;;IAEA;IACAnB,EAAE,CAACqB,eAAe,CAACN,KAAK;;IAEtB;IAAA,CACCO,KAAK,CACJ,MAAM,EACNtB,EAAE,CAACuB,SAAS,CAACX,KAAK,CAAC,CAACY,EAAE,CAAEV,CAAC,IAAKA,CAAC,CAACU,EAAE,CACpC,CAAC,CACAF,KAAK,CAAC,SAAS,EAAEtB,EAAE,CAACyB,YAAY,CAAC,CAAC,CAACC,MAAM,CAACf,MAAM,CAAC,CAAC,CAClDW,KAAK,CAAC,QAAQ,EAAEtB,EAAE,CAAC2B,aAAa,CAAC,CAAC,CAAC,CACnCL,KAAK,CAAC,QAAQ,EAAEtB,EAAE,CAAC4B,WAAW,CAACpB,KAAK,GAAG,CAAC,EAAEC,MAAM,GAAG,CAAC,CAAC;;IAEtD;IAAA,CACCoB,EAAE,CAAC,MAAM,EAAE,MAAM;MAChB1B,WAAW,CAACgB,OAAO,EAAEX,KAAK,EAAEC,MAAM,EAAEM,KAAK,EAAEH,KAAK,EAAED,MAAM,CAAC;IAC3D,CAAC,CAAC;EACN,CAAC,EAAE,CAACH,KAAK,EAAEC,MAAM,EAAEM,KAAK,EAAEH,KAAK,CAAC,CAAC;EAEjC,oBACEP,OAAA;IAAAyB,QAAA,eACEzB,OAAA;MACE0B,GAAG,EAAEf,SAAU;MACfgB,KAAK,EAAE;QACLxB,KAAK,EAAEA,KAAK;QACZC,MAAM,EAAEA,MAAM;QACdwB,eAAe,EAAE;MACnB,CAAE;MACFzB,KAAK,EAAEA,KAAM;MACbC,MAAM,EAAEA;IAAO;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC3B,EAAA,CArDWJ,cAAc;AAAAgC,EAAA,GAAdhC,cAAc;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}