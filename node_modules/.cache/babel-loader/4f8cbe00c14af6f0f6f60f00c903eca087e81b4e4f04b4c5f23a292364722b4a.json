{"ast":null,"code":"var _jsxFileName = \"/Users/radhika.bajaj/Documents/GitHub/Knowledge-Graph-Frontend/src/components/NetworkDiagram.js\",\n  _s = $RefreshSig$();\nimport * as d3 from 'd3';\nimport { useEffect, useRef } from 'react';\nimport DrawNetwork from './DrawNetwork';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NetworkDiagram = ({\n  graph,\n  width,\n  height\n}) => {\n  _s();\n  // The force simulation mutates links and nodes, so create a copy first\n  // Node positions are initialized by d3\n  const RADIUS = 40;\n  const links = graph.links.map(d => ({\n    ...d\n  }));\n  const nodes = graph.nodes.map(d => ({\n    ...d\n  }));\n  let cameraOffset = {\n    x: window.innerWidth / 2,\n    y: window.innerHeight / 2\n  };\n  let cameraZoom = 1;\n  let MAX_ZOOM = 5;\n  let MIN_ZOOM = 0.1;\n  let SCROLL_SENSITIVITY = 0.0005;\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    // set dimension of the canvas element\n    const canvas = canvasRef.current;\n    const context = canvas === null || canvas === void 0 ? void 0 : canvas.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    if (!context) {\n      return;\n    }\n\n    // run d3-force to find the position of nodes on the canvas\n    d3.forceSimulation(nodes)\n\n    // list of forces we apply to get node positions\n    .force('link', d3.forceLink(links).id(d => d.id)).force('collide', d3.forceCollide().radius(RADIUS)).force('charge', d3.forceManyBody()).force('center', d3.forceCenter(width / 2, height / 2))\n\n    // at each iteration of the simulation, draw the network diagram with the new node positions\n    .on('tick', () => {\n      DrawNetwork(context, canvas.width, canvas.height, nodes, links, RADIUS);\n    });\n  }, [nodes, links]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width: canvasRef.innerWidth,\n        height: canvasRef.innerHeight,\n        backgroundColor: \"#F2F1F1\"\n      },\n      width: width,\n      height: height\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 17\n  }, this);\n};\n_s(NetworkDiagram, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = NetworkDiagram;\nvar _c;\n$RefreshReg$(_c, \"NetworkDiagram\");","map":{"version":3,"names":["d3","useEffect","useRef","DrawNetwork","jsxDEV","_jsxDEV","NetworkDiagram","graph","width","height","_s","RADIUS","links","map","d","nodes","cameraOffset","x","window","innerWidth","y","innerHeight","cameraZoom","MAX_ZOOM","MIN_ZOOM","SCROLL_SENSITIVITY","canvasRef","canvas","current","context","getContext","forceSimulation","force","forceLink","id","forceCollide","radius","forceManyBody","forceCenter","on","children","ref","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/radhika.bajaj/Documents/GitHub/Knowledge-Graph-Frontend/src/components/NetworkDiagram.js"],"sourcesContent":["import * as d3 from 'd3';\nimport { useEffect, useRef } from 'react';\nimport DrawNetwork from './DrawNetwork';\n\nexport const NetworkDiagram = ({graph, width, height}) => {\n  // The force simulation mutates links and nodes, so create a copy first\n  // Node positions are initialized by d3\n  const RADIUS = 40;\n  const links = graph.links.map((d) => ({ ...d }));\n  const nodes = graph.nodes.map((d) => ({ ...d }));\n\n  let cameraOffset = { x: window.innerWidth/2, y: window.innerHeight/2 }\n  let cameraZoom = 1\n  let MAX_ZOOM = 5\n  let MIN_ZOOM = 0.1\n  let SCROLL_SENSITIVITY = 0.0005\n\n  const canvasRef = useRef(null);\n  \n\n  useEffect(() => {\n    // set dimension of the canvas element\n    const canvas = canvasRef.current;\n    const context = canvas?.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    if (!context) {\n      return;\n    }\n\n    // run d3-force to find the position of nodes on the canvas\n    d3.forceSimulation(nodes)\n\n      // list of forces we apply to get node positions\n      .force(\n        'link',\n        d3.forceLink(links).id((d) => d.id)\n      )\n      .force('collide', d3.forceCollide().radius(RADIUS))\n      .force('charge', d3.forceManyBody())\n      .force('center', d3.forceCenter(width / 2, height / 2))\n\n      // at each iteration of the simulation, draw the network diagram with the new node positions\n      .on('tick', () => {\n        DrawNetwork(context, canvas.width, canvas.height, nodes, links, RADIUS);\n      });\n  }, [nodes, links]);\n\n    \n    return (\n                <div>\n                <canvas\n                    ref={canvasRef}\n                    style={{\n                    width: canvasRef.innerWidth,\n                    height: canvasRef.innerHeight,\n                    backgroundColor: \"#F2F1F1\"\n                    }}\n                    width={width}\n                    height={height}\n                />\n                </div>\n        \n    );\n};\n"],"mappings":";;AAAA,OAAO,KAAKA,EAAE,MAAM,IAAI;AACxB,SAASC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,OAAO,MAAMC,cAAc,GAAGA,CAAC;EAACC,KAAK;EAAEC,KAAK;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EACxD;EACA;EACA,MAAMC,MAAM,GAAG,EAAE;EACjB,MAAMC,KAAK,GAAGL,KAAK,CAACK,KAAK,CAACC,GAAG,CAAEC,CAAC,KAAM;IAAE,GAAGA;EAAE,CAAC,CAAC,CAAC;EAChD,MAAMC,KAAK,GAAGR,KAAK,CAACQ,KAAK,CAACF,GAAG,CAAEC,CAAC,KAAM;IAAE,GAAGA;EAAE,CAAC,CAAC,CAAC;EAEhD,IAAIE,YAAY,GAAG;IAAEC,CAAC,EAAEC,MAAM,CAACC,UAAU,GAAC,CAAC;IAAEC,CAAC,EAAEF,MAAM,CAACG,WAAW,GAAC;EAAE,CAAC;EACtE,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,QAAQ,GAAG,CAAC;EAChB,IAAIC,QAAQ,GAAG,GAAG;EAClB,IAAIC,kBAAkB,GAAG,MAAM;EAE/B,MAAMC,SAAS,GAAGxB,MAAM,CAAC,IAAI,CAAC;EAG9BD,SAAS,CAAC,MAAM;IACd;IACA,MAAM0B,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,MAAMC,OAAO,GAAGF,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEG,UAAU,CAAC,IAAI,CAAC;IACxCH,MAAM,CAACnB,KAAK,GAAGU,MAAM,CAACC,UAAU;IAChCQ,MAAM,CAAClB,MAAM,GAAGS,MAAM,CAACG,WAAW;IAElC,IAAI,CAACQ,OAAO,EAAE;MACZ;IACF;;IAEA;IACA7B,EAAE,CAAC+B,eAAe,CAAChB,KAAK;;IAEtB;IAAA,CACCiB,KAAK,CACJ,MAAM,EACNhC,EAAE,CAACiC,SAAS,CAACrB,KAAK,CAAC,CAACsB,EAAE,CAAEpB,CAAC,IAAKA,CAAC,CAACoB,EAAE,CACpC,CAAC,CACAF,KAAK,CAAC,SAAS,EAAEhC,EAAE,CAACmC,YAAY,CAAC,CAAC,CAACC,MAAM,CAACzB,MAAM,CAAC,CAAC,CAClDqB,KAAK,CAAC,QAAQ,EAAEhC,EAAE,CAACqC,aAAa,CAAC,CAAC,CAAC,CACnCL,KAAK,CAAC,QAAQ,EAAEhC,EAAE,CAACsC,WAAW,CAAC9B,KAAK,GAAG,CAAC,EAAEC,MAAM,GAAG,CAAC,CAAC;;IAEtD;IAAA,CACC8B,EAAE,CAAC,MAAM,EAAE,MAAM;MAChBpC,WAAW,CAAC0B,OAAO,EAAEF,MAAM,CAACnB,KAAK,EAAEmB,MAAM,CAAClB,MAAM,EAAEM,KAAK,EAAEH,KAAK,EAAED,MAAM,CAAC;IACzE,CAAC,CAAC;EACN,CAAC,EAAE,CAACI,KAAK,EAAEH,KAAK,CAAC,CAAC;EAGhB,oBACYP,OAAA;IAAAmC,QAAA,eACAnC,OAAA;MACIoC,GAAG,EAAEf,SAAU;MACfgB,KAAK,EAAE;QACPlC,KAAK,EAAEkB,SAAS,CAACP,UAAU;QAC3BV,MAAM,EAAEiB,SAAS,CAACL,WAAW;QAC7BsB,eAAe,EAAE;MACjB,CAAE;MACFnC,KAAK,EAAEA,KAAM;MACbC,MAAM,EAAEA;IAAO;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAGtB,CAAC;AAACrC,EAAA,CA7DWJ,cAAc;AAAA0C,EAAA,GAAd1C,cAAc;AAAA,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}