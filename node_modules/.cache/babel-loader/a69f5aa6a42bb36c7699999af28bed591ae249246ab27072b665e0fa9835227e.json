{"ast":null,"code":"var _jsxFileName = \"/Users/radhika.bajaj/Documents/GitHub/Knowledge-Graph-Frontend/src/components/NetworkDiagram.js\",\n  _s = $RefreshSig$();\nimport * as d3 from 'd3';\nimport { useEffect, useRef } from 'react';\nimport DrawNetwork from './DrawNetwork';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NetworkDiagram = ({\n  graph\n}) => {\n  _s();\n  // The force simulation mutates links and nodes, so create a copy first\n  // Node positions are initialized by d3\n  const RADIUS = 40;\n  const links = graph.links.map(d => ({\n    ...d\n  }));\n  const nodes = graph.nodes.map(d => ({\n    ...d\n  }));\n  const canvasRef = useRef(null);\n  let cameraOffset = {\n    x: canvasRef.innerWidth / 2,\n    y: canvasRef.innerHeight / 2\n  };\n  let cameraZoom = 1;\n  let MAX_ZOOM = 5;\n  let MIN_ZOOM = 0.1;\n  let SCROLL_SENSITIVITY = 0.0005;\n  useEffect(() => {\n    // set dimension of the canvas element\n    const canvas = canvasRef.current;\n    const context = canvas === null || canvas === void 0 ? void 0 : canvas.getContext('2d');\n    if (!context) {\n      return;\n    }\n    context.translate(canvas.innerWidth / 2, canvas.innerHeight / 2);\n    context.scale(cameraZoom, cameraZoom);\n    context.translate(-canvas.innerWidth / 2 + cameraOffset.x, -canvas.innerHeight / 2 + cameraOffset.y);\n\n    // Gets the relevant location from a mouse or single touch event\n    function getEventLocation(e) {\n      if (e.touches && e.touches.length === 1) {\n        return {\n          x: e.touches[0].clientX,\n          y: e.touches[0].clientY\n        };\n      } else if (e.clientX && e.clientY) {\n        return {\n          x: e.clientX,\n          y: e.clientY\n        };\n      }\n    }\n    let isDragging = false;\n    let dragStart = {\n      x: 0,\n      y: 0\n    };\n    function onPointerDown(e) {\n      isDragging = true;\n      dragStart.x = getEventLocation(e).x / cameraZoom - cameraOffset.x;\n      dragStart.y = getEventLocation(e).y / cameraZoom - cameraOffset.y;\n    }\n    function onPointerUp(e) {\n      isDragging = false;\n      initialPinchDistance = null;\n      lastZoom = cameraZoom;\n    }\n    function onPointerMove(e) {\n      if (isDragging) {\n        cameraOffset.x = getEventLocation(e).x / cameraZoom - dragStart.x;\n        cameraOffset.y = getEventLocation(e).y / cameraZoom - dragStart.y;\n      }\n    }\n    function handleTouch(e, singleTouchHandler) {\n      if (e.touches.length === 1) {\n        singleTouchHandler(e);\n      } else if (e.type === \"touchmove\" && e.touches.length === 2) {\n        isDragging = false;\n        handlePinch(e);\n      }\n    }\n    let initialPinchDistance = null;\n    let lastZoom = cameraZoom;\n    function handlePinch(e) {\n      e.preventDefault();\n      let touch1 = {\n        x: e.touches[0].clientX,\n        y: e.touches[0].clientY\n      };\n      let touch2 = {\n        x: e.touches[1].clientX,\n        y: e.touches[1].clientY\n      };\n\n      // This is distance squared, but no need for an expensive sqrt as it's only used in ratio\n      let currentDistance = (touch1.x - touch2.x) ** 2 + (touch1.y - touch2.y) ** 2;\n      if (initialPinchDistance == null) {\n        initialPinchDistance = currentDistance;\n      } else {\n        adjustZoom(null, currentDistance / initialPinchDistance);\n      }\n    }\n    function adjustZoom(zoomAmount, zoomFactor) {\n      if (!isDragging) {\n        if (zoomAmount) {\n          cameraZoom += zoomAmount;\n        } else if (zoomFactor) {\n          console.log(zoomFactor);\n          cameraZoom = zoomFactor * lastZoom;\n        }\n        cameraZoom = Math.min(cameraZoom, MAX_ZOOM);\n        cameraZoom = Math.max(cameraZoom, MIN_ZOOM);\n        console.log(zoomAmount);\n      }\n    }\n    canvas.addEventListener('mousedown', onPointerDown);\n    canvas.addEventListener('touchstart', e => handleTouch(e, onPointerDown));\n    canvas.addEventListener('mouseup', onPointerUp);\n    canvas.addEventListener('touchend', e => handleTouch(e, onPointerUp));\n    canvas.addEventListener('mousemove', onPointerMove);\n    canvas.addEventListener('touchmove', e => handleTouch(e, onPointerMove));\n    canvas.addEventListener('wheel', e => adjustZoom(e.deltaY * SCROLL_SENSITIVITY));\n\n    // run d3-force to find the position of nodes on the canvas\n    d3.forceSimulation(nodes)\n\n    // list of forces we apply to get node positions\n    .force('link', d3.forceLink(links).id(d => d.id)).force('collide', d3.forceCollide().radius(RADIUS)).force('charge', d3.forceManyBody()).force('center', d3.forceCenter(width / 2, height / 2))\n\n    // at each iteration of the simulation, draw the network diagram with the new node positions\n    .on('tick', () => {\n      DrawNetwork(context, canvas.innerWidth, canvas.innerHeight, nodes, links, RADIUS);\n    });\n  }, [nodes, links]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width: canvasRef.innerWidth,\n        height: canvasRef.innerHeight,\n        backgroundColor: \"#F2F1F1\"\n      },\n      width: canvasRef.innerWidth,\n      height: canvasRef.innerHeight\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 17\n  }, this);\n};\n_s(NetworkDiagram, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = NetworkDiagram;\nvar _c;\n$RefreshReg$(_c, \"NetworkDiagram\");","map":{"version":3,"names":["d3","useEffect","useRef","DrawNetwork","jsxDEV","_jsxDEV","NetworkDiagram","graph","_s","RADIUS","links","map","d","nodes","canvasRef","cameraOffset","x","innerWidth","y","innerHeight","cameraZoom","MAX_ZOOM","MIN_ZOOM","SCROLL_SENSITIVITY","canvas","current","context","getContext","translate","scale","getEventLocation","e","touches","length","clientX","clientY","isDragging","dragStart","onPointerDown","onPointerUp","initialPinchDistance","lastZoom","onPointerMove","handleTouch","singleTouchHandler","type","handlePinch","preventDefault","touch1","touch2","currentDistance","adjustZoom","zoomAmount","zoomFactor","console","log","Math","min","max","addEventListener","deltaY","forceSimulation","force","forceLink","id","forceCollide","radius","forceManyBody","forceCenter","width","height","on","children","ref","style","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/radhika.bajaj/Documents/GitHub/Knowledge-Graph-Frontend/src/components/NetworkDiagram.js"],"sourcesContent":["import * as d3 from 'd3';\nimport { useEffect, useRef } from 'react';\nimport DrawNetwork from './DrawNetwork';\n\nexport const NetworkDiagram = ({graph}) => {\n  // The force simulation mutates links and nodes, so create a copy first\n  // Node positions are initialized by d3\n  const RADIUS = 40;\n  const links = graph.links.map((d) => ({ ...d }));\n  const nodes = graph.nodes.map((d) => ({ ...d }));\n\n  const canvasRef = useRef(null);\n\n  let cameraOffset = { x: canvasRef.innerWidth/2, y: canvasRef.innerHeight/2 }\n  let cameraZoom = 1\n  let MAX_ZOOM = 5\n  let MIN_ZOOM = 0.1\n  let SCROLL_SENSITIVITY = 0.0005\n  \n\n  useEffect(() => {\n    // set dimension of the canvas element\n    const canvas = canvasRef.current;\n    const context = canvas?.getContext('2d');\n\n    if (!context) {\n      return;\n    }\n\n    context.translate( canvas.innerWidth / 2, canvas.innerHeight / 2 )\n    context.scale(cameraZoom, cameraZoom)\n    context.translate( -canvas.innerWidth / 2 + cameraOffset.x, -canvas.innerHeight / 2 + cameraOffset.y )\n\n    // Gets the relevant location from a mouse or single touch event\n    function getEventLocation(e) {\n        if (e.touches && e.touches.length === 1)\n        {\n            return { x:e.touches[0].clientX, y: e.touches[0].clientY }\n        }\n        else if (e.clientX && e.clientY)\n        {\n            return { x: e.clientX, y: e.clientY }        \n        }\n    }\n\n    let isDragging = false\n    let dragStart = { x: 0, y: 0 }\n\n    function onPointerDown(e) {\n        isDragging = true\n        dragStart.x = getEventLocation(e).x/cameraZoom - cameraOffset.x\n        dragStart.y = getEventLocation(e).y/cameraZoom - cameraOffset.y\n    }\n\n    function onPointerUp(e) {\n        isDragging = false\n        initialPinchDistance = null\n        lastZoom = cameraZoom\n    }\n\n    function onPointerMove(e) {\n        if (isDragging)\n        {\n            cameraOffset.x = getEventLocation(e).x/cameraZoom - dragStart.x\n            cameraOffset.y = getEventLocation(e).y/cameraZoom - dragStart.y\n        }\n    }\n\n    function handleTouch(e, singleTouchHandler) {\n        if ( e.touches.length === 1 )\n        {\n            singleTouchHandler(e)\n        }\n        else if (e.type === \"touchmove\" && e.touches.length === 2)\n        {\n            isDragging = false\n            handlePinch(e)\n        }\n    }\n\n    let initialPinchDistance = null\n    let lastZoom = cameraZoom\n\n    function handlePinch(e) {\n        e.preventDefault()\n        \n        let touch1 = { x: e.touches[0].clientX, y: e.touches[0].clientY }\n        let touch2 = { x: e.touches[1].clientX, y: e.touches[1].clientY }\n        \n        // This is distance squared, but no need for an expensive sqrt as it's only used in ratio\n        let currentDistance = (touch1.x - touch2.x)**2 + (touch1.y - touch2.y)**2\n        \n        if (initialPinchDistance == null)\n        {\n            initialPinchDistance = currentDistance\n        }\n        else\n        {\n            adjustZoom( null, currentDistance/initialPinchDistance )\n        }\n    }\n\n    function adjustZoom(zoomAmount, zoomFactor) {\n        if (!isDragging)\n        {\n            if (zoomAmount)\n            {\n                cameraZoom += zoomAmount\n            }\n            else if (zoomFactor)\n            {\n                console.log(zoomFactor)\n                cameraZoom = zoomFactor*lastZoom\n            }\n            \n            cameraZoom = Math.min( cameraZoom, MAX_ZOOM )\n            cameraZoom = Math.max( cameraZoom, MIN_ZOOM )\n            \n            console.log(zoomAmount)\n        }\n    }\n\n    canvas.addEventListener('mousedown', onPointerDown)\n    canvas.addEventListener('touchstart', (e) => handleTouch(e, onPointerDown))\n    canvas.addEventListener('mouseup', onPointerUp)\n    canvas.addEventListener('touchend',  (e) => handleTouch(e, onPointerUp))\n    canvas.addEventListener('mousemove', onPointerMove)\n    canvas.addEventListener('touchmove', (e) => handleTouch(e, onPointerMove))\n    canvas.addEventListener( 'wheel', (e) => adjustZoom(e.deltaY*SCROLL_SENSITIVITY))\n\n    // run d3-force to find the position of nodes on the canvas\n    d3.forceSimulation(nodes)\n\n      // list of forces we apply to get node positions\n      .force(\n        'link',\n        d3.forceLink(links).id((d) => d.id)\n      )\n      .force('collide', d3.forceCollide().radius(RADIUS))\n      .force('charge', d3.forceManyBody())\n      .force('center', d3.forceCenter(width / 2, height / 2))\n\n      // at each iteration of the simulation, draw the network diagram with the new node positions\n      .on('tick', () => {\n        DrawNetwork(context, canvas.innerWidth, canvas.innerHeight, nodes, links, RADIUS);\n      });\n  }, [nodes, links]);\n\n    \n    return (\n                <div>\n                <canvas\n                    ref={canvasRef}\n                    style={{\n                    width: canvasRef.innerWidth,\n                    height: canvasRef.innerHeight,\n                    backgroundColor: \"#F2F1F1\"\n                    }}\n                    width={canvasRef.innerWidth}\n                    height={canvasRef.innerHeight}\n                />\n                </div>\n        \n    );\n};\n"],"mappings":";;AAAA,OAAO,KAAKA,EAAE,MAAM,IAAI;AACxB,SAASC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,OAAO,MAAMC,cAAc,GAAGA,CAAC;EAACC;AAAK,CAAC,KAAK;EAAAC,EAAA;EACzC;EACA;EACA,MAAMC,MAAM,GAAG,EAAE;EACjB,MAAMC,KAAK,GAAGH,KAAK,CAACG,KAAK,CAACC,GAAG,CAAEC,CAAC,KAAM;IAAE,GAAGA;EAAE,CAAC,CAAC,CAAC;EAChD,MAAMC,KAAK,GAAGN,KAAK,CAACM,KAAK,CAACF,GAAG,CAAEC,CAAC,KAAM;IAAE,GAAGA;EAAE,CAAC,CAAC,CAAC;EAEhD,MAAME,SAAS,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAE9B,IAAIa,YAAY,GAAG;IAAEC,CAAC,EAAEF,SAAS,CAACG,UAAU,GAAC,CAAC;IAAEC,CAAC,EAAEJ,SAAS,CAACK,WAAW,GAAC;EAAE,CAAC;EAC5E,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,QAAQ,GAAG,CAAC;EAChB,IAAIC,QAAQ,GAAG,GAAG;EAClB,IAAIC,kBAAkB,GAAG,MAAM;EAG/BtB,SAAS,CAAC,MAAM;IACd;IACA,MAAMuB,MAAM,GAAGV,SAAS,CAACW,OAAO;IAChC,MAAMC,OAAO,GAAGF,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEG,UAAU,CAAC,IAAI,CAAC;IAExC,IAAI,CAACD,OAAO,EAAE;MACZ;IACF;IAEAA,OAAO,CAACE,SAAS,CAAEJ,MAAM,CAACP,UAAU,GAAG,CAAC,EAAEO,MAAM,CAACL,WAAW,GAAG,CAAE,CAAC;IAClEO,OAAO,CAACG,KAAK,CAACT,UAAU,EAAEA,UAAU,CAAC;IACrCM,OAAO,CAACE,SAAS,CAAE,CAACJ,MAAM,CAACP,UAAU,GAAG,CAAC,GAAGF,YAAY,CAACC,CAAC,EAAE,CAACQ,MAAM,CAACL,WAAW,GAAG,CAAC,GAAGJ,YAAY,CAACG,CAAE,CAAC;;IAEtG;IACA,SAASY,gBAAgBA,CAACC,CAAC,EAAE;MACzB,IAAIA,CAAC,CAACC,OAAO,IAAID,CAAC,CAACC,OAAO,CAACC,MAAM,KAAK,CAAC,EACvC;QACI,OAAO;UAAEjB,CAAC,EAACe,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAACE,OAAO;UAAEhB,CAAC,EAAEa,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAACG;QAAQ,CAAC;MAC9D,CAAC,MACI,IAAIJ,CAAC,CAACG,OAAO,IAAIH,CAAC,CAACI,OAAO,EAC/B;QACI,OAAO;UAAEnB,CAAC,EAAEe,CAAC,CAACG,OAAO;UAAEhB,CAAC,EAAEa,CAAC,CAACI;QAAQ,CAAC;MACzC;IACJ;IAEA,IAAIC,UAAU,GAAG,KAAK;IACtB,IAAIC,SAAS,GAAG;MAAErB,CAAC,EAAE,CAAC;MAAEE,CAAC,EAAE;IAAE,CAAC;IAE9B,SAASoB,aAAaA,CAACP,CAAC,EAAE;MACtBK,UAAU,GAAG,IAAI;MACjBC,SAAS,CAACrB,CAAC,GAAGc,gBAAgB,CAACC,CAAC,CAAC,CAACf,CAAC,GAACI,UAAU,GAAGL,YAAY,CAACC,CAAC;MAC/DqB,SAAS,CAACnB,CAAC,GAAGY,gBAAgB,CAACC,CAAC,CAAC,CAACb,CAAC,GAACE,UAAU,GAAGL,YAAY,CAACG,CAAC;IACnE;IAEA,SAASqB,WAAWA,CAACR,CAAC,EAAE;MACpBK,UAAU,GAAG,KAAK;MAClBI,oBAAoB,GAAG,IAAI;MAC3BC,QAAQ,GAAGrB,UAAU;IACzB;IAEA,SAASsB,aAAaA,CAACX,CAAC,EAAE;MACtB,IAAIK,UAAU,EACd;QACIrB,YAAY,CAACC,CAAC,GAAGc,gBAAgB,CAACC,CAAC,CAAC,CAACf,CAAC,GAACI,UAAU,GAAGiB,SAAS,CAACrB,CAAC;QAC/DD,YAAY,CAACG,CAAC,GAAGY,gBAAgB,CAACC,CAAC,CAAC,CAACb,CAAC,GAACE,UAAU,GAAGiB,SAAS,CAACnB,CAAC;MACnE;IACJ;IAEA,SAASyB,WAAWA,CAACZ,CAAC,EAAEa,kBAAkB,EAAE;MACxC,IAAKb,CAAC,CAACC,OAAO,CAACC,MAAM,KAAK,CAAC,EAC3B;QACIW,kBAAkB,CAACb,CAAC,CAAC;MACzB,CAAC,MACI,IAAIA,CAAC,CAACc,IAAI,KAAK,WAAW,IAAId,CAAC,CAACC,OAAO,CAACC,MAAM,KAAK,CAAC,EACzD;QACIG,UAAU,GAAG,KAAK;QAClBU,WAAW,CAACf,CAAC,CAAC;MAClB;IACJ;IAEA,IAAIS,oBAAoB,GAAG,IAAI;IAC/B,IAAIC,QAAQ,GAAGrB,UAAU;IAEzB,SAAS0B,WAAWA,CAACf,CAAC,EAAE;MACpBA,CAAC,CAACgB,cAAc,CAAC,CAAC;MAElB,IAAIC,MAAM,GAAG;QAAEhC,CAAC,EAAEe,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAACE,OAAO;QAAEhB,CAAC,EAAEa,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAACG;MAAQ,CAAC;MACjE,IAAIc,MAAM,GAAG;QAAEjC,CAAC,EAAEe,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAACE,OAAO;QAAEhB,CAAC,EAAEa,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,CAACG;MAAQ,CAAC;;MAEjE;MACA,IAAIe,eAAe,GAAG,CAACF,MAAM,CAAChC,CAAC,GAAGiC,MAAM,CAACjC,CAAC,KAAG,CAAC,GAAG,CAACgC,MAAM,CAAC9B,CAAC,GAAG+B,MAAM,CAAC/B,CAAC,KAAG,CAAC;MAEzE,IAAIsB,oBAAoB,IAAI,IAAI,EAChC;QACIA,oBAAoB,GAAGU,eAAe;MAC1C,CAAC,MAED;QACIC,UAAU,CAAE,IAAI,EAAED,eAAe,GAACV,oBAAqB,CAAC;MAC5D;IACJ;IAEA,SAASW,UAAUA,CAACC,UAAU,EAAEC,UAAU,EAAE;MACxC,IAAI,CAACjB,UAAU,EACf;QACI,IAAIgB,UAAU,EACd;UACIhC,UAAU,IAAIgC,UAAU;QAC5B,CAAC,MACI,IAAIC,UAAU,EACnB;UACIC,OAAO,CAACC,GAAG,CAACF,UAAU,CAAC;UACvBjC,UAAU,GAAGiC,UAAU,GAACZ,QAAQ;QACpC;QAEArB,UAAU,GAAGoC,IAAI,CAACC,GAAG,CAAErC,UAAU,EAAEC,QAAS,CAAC;QAC7CD,UAAU,GAAGoC,IAAI,CAACE,GAAG,CAAEtC,UAAU,EAAEE,QAAS,CAAC;QAE7CgC,OAAO,CAACC,GAAG,CAACH,UAAU,CAAC;MAC3B;IACJ;IAEA5B,MAAM,CAACmC,gBAAgB,CAAC,WAAW,EAAErB,aAAa,CAAC;IACnDd,MAAM,CAACmC,gBAAgB,CAAC,YAAY,EAAG5B,CAAC,IAAKY,WAAW,CAACZ,CAAC,EAAEO,aAAa,CAAC,CAAC;IAC3Ed,MAAM,CAACmC,gBAAgB,CAAC,SAAS,EAAEpB,WAAW,CAAC;IAC/Cf,MAAM,CAACmC,gBAAgB,CAAC,UAAU,EAAI5B,CAAC,IAAKY,WAAW,CAACZ,CAAC,EAAEQ,WAAW,CAAC,CAAC;IACxEf,MAAM,CAACmC,gBAAgB,CAAC,WAAW,EAAEjB,aAAa,CAAC;IACnDlB,MAAM,CAACmC,gBAAgB,CAAC,WAAW,EAAG5B,CAAC,IAAKY,WAAW,CAACZ,CAAC,EAAEW,aAAa,CAAC,CAAC;IAC1ElB,MAAM,CAACmC,gBAAgB,CAAE,OAAO,EAAG5B,CAAC,IAAKoB,UAAU,CAACpB,CAAC,CAAC6B,MAAM,GAACrC,kBAAkB,CAAC,CAAC;;IAEjF;IACAvB,EAAE,CAAC6D,eAAe,CAAChD,KAAK;;IAEtB;IAAA,CACCiD,KAAK,CACJ,MAAM,EACN9D,EAAE,CAAC+D,SAAS,CAACrD,KAAK,CAAC,CAACsD,EAAE,CAAEpD,CAAC,IAAKA,CAAC,CAACoD,EAAE,CACpC,CAAC,CACAF,KAAK,CAAC,SAAS,EAAE9D,EAAE,CAACiE,YAAY,CAAC,CAAC,CAACC,MAAM,CAACzD,MAAM,CAAC,CAAC,CAClDqD,KAAK,CAAC,QAAQ,EAAE9D,EAAE,CAACmE,aAAa,CAAC,CAAC,CAAC,CACnCL,KAAK,CAAC,QAAQ,EAAE9D,EAAE,CAACoE,WAAW,CAACC,KAAK,GAAG,CAAC,EAAEC,MAAM,GAAG,CAAC,CAAC;;IAEtD;IAAA,CACCC,EAAE,CAAC,MAAM,EAAE,MAAM;MAChBpE,WAAW,CAACuB,OAAO,EAAEF,MAAM,CAACP,UAAU,EAAEO,MAAM,CAACL,WAAW,EAAEN,KAAK,EAAEH,KAAK,EAAED,MAAM,CAAC;IACnF,CAAC,CAAC;EACN,CAAC,EAAE,CAACI,KAAK,EAAEH,KAAK,CAAC,CAAC;EAGhB,oBACYL,OAAA;IAAAmE,QAAA,eACAnE,OAAA;MACIoE,GAAG,EAAE3D,SAAU;MACf4D,KAAK,EAAE;QACPL,KAAK,EAAEvD,SAAS,CAACG,UAAU;QAC3BqD,MAAM,EAAExD,SAAS,CAACK,WAAW;QAC7BwD,eAAe,EAAE;MACjB,CAAE;MACFN,KAAK,EAAEvD,SAAS,CAACG,UAAW;MAC5BqD,MAAM,EAAExD,SAAS,CAACK;IAAY;MAAAyD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAGtB,CAAC;AAACvE,EAAA,CAhKWF,cAAc;AAAA0E,EAAA,GAAd1E,cAAc;AAAA,IAAA0E,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}