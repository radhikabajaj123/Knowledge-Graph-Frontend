{"ast":null,"code":"var _jsxFileName = \"/Users/radhika.bajaj/Documents/GitHub/Knowledge-Graph-Frontend/src/components/NetworkDiagram.js\",\n  _s = $RefreshSig$();\nimport * as d3 from 'd3';\nimport { useEffect, useRef } from 'react';\nimport DrawNetwork from './DrawNetwork';\nimport Data from './Data.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const NetworkDiagram = ({\n  width,\n  height\n}) => {\n  _s();\n  // The force simulation mutates links and nodes, so create a copy first\n  // Node positions are initialized by d3\n  const links = Data.links.map(d => ({\n    ...d\n  }));\n  const nodes = Data.nodes.map(d => ({\n    ...d\n  }));\n  const canvasRef = useRef < HTMLCanvasElement > null;\n  useEffect(() => {\n    // set dimension of the canvas element\n    const canvas = canvasRef.current;\n    const context = canvas === null || canvas === void 0 ? void 0 : canvas.getContext('2d');\n    if (!context) {\n      return;\n    }\n\n    // run d3-force to find the position of nodes on the canvas\n    d3.forceSimulation(nodes)\n\n    // list of forces we apply to get node positions\n    .force('link', d3.forceLink < Node, Link > links.id(d => d.id)).force('collide', d3.forceCollide().radius(RADIUS)).force('charge', d3.forceManyBody()).force('center', d3.forceCenter(width / 2, height / 2))\n\n    // at each iteration of the simulation, draw the network diagram with the new node positions\n    .on('tick', () => {\n      DrawNetwork(context, width, height, nodes, links);\n    });\n  }, [width, height, nodes, links]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width,\n        height\n      },\n      width: width,\n      height: height\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(NetworkDiagram, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = NetworkDiagram;\nvar _c;\n$RefreshReg$(_c, \"NetworkDiagram\");","map":{"version":3,"names":["d3","useEffect","useRef","DrawNetwork","Data","jsxDEV","_jsxDEV","NetworkDiagram","width","height","_s","links","map","d","nodes","canvasRef","HTMLCanvasElement","canvas","current","context","getContext","forceSimulation","force","forceLink","Node","Link","id","forceCollide","radius","RADIUS","forceManyBody","forceCenter","on","children","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/radhika.bajaj/Documents/GitHub/Knowledge-Graph-Frontend/src/components/NetworkDiagram.js"],"sourcesContent":["import * as d3 from 'd3';\nimport { useEffect, useRef } from 'react';\nimport DrawNetwork from './DrawNetwork';\nimport Data from './Data.json';\n\nexport const NetworkDiagram = ({width, height}) => {\n  // The force simulation mutates links and nodes, so create a copy first\n  // Node positions are initialized by d3\n  const links = Data.links.map((d) => ({ ...d }));\n  const nodes = Data.nodes.map((d) => ({ ...d }));\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    // set dimension of the canvas element\n    const canvas = canvasRef.current;\n    const context = canvas?.getContext('2d');\n\n    if (!context) {\n      return;\n    }\n\n    // run d3-force to find the position of nodes on the canvas\n    d3.forceSimulation(nodes)\n\n      // list of forces we apply to get node positions\n      .force(\n        'link',\n        d3.forceLink<Node, Link>(links).id((d) => d.id)\n      )\n      .force('collide', d3.forceCollide().radius(RADIUS))\n      .force('charge', d3.forceManyBody())\n      .force('center', d3.forceCenter(width / 2, height / 2))\n\n      // at each iteration of the simulation, draw the network diagram with the new node positions\n      .on('tick', () => {\n        DrawNetwork(context, width, height, nodes, links);\n      });\n  }, [width, height, nodes, links]);\n\n  return (\n    <div>\n      <canvas\n        ref={canvasRef}\n        style={{\n          width,\n          height,\n        }}\n        width={width}\n        height={height}\n      />\n    </div>\n  );\n};\n"],"mappings":";;AAAA,OAAO,KAAKA,EAAE,MAAM,IAAI;AACxB,SAASC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,IAAI,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,OAAO,MAAMC,cAAc,GAAGA,CAAC;EAACC,KAAK;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EACjD;EACA;EACA,MAAMC,KAAK,GAAGP,IAAI,CAACO,KAAK,CAACC,GAAG,CAAEC,CAAC,KAAM;IAAE,GAAGA;EAAE,CAAC,CAAC,CAAC;EAC/C,MAAMC,KAAK,GAAGV,IAAI,CAACU,KAAK,CAACF,GAAG,CAAEC,CAAC,KAAM;IAAE,GAAGA;EAAE,CAAC,CAAC,CAAC;EAE/C,MAAME,SAAS,GAAGb,MAAM,GAACc,iBAAiB,GAAE,IAAK;EAEjDf,SAAS,CAAC,MAAM;IACd;IACA,MAAMgB,MAAM,GAAGF,SAAS,CAACG,OAAO;IAChC,MAAMC,OAAO,GAAGF,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEG,UAAU,CAAC,IAAI,CAAC;IAExC,IAAI,CAACD,OAAO,EAAE;MACZ;IACF;;IAEA;IACAnB,EAAE,CAACqB,eAAe,CAACP,KAAK;;IAEtB;IAAA,CACCQ,KAAK,CACJ,MAAM,EACNtB,EAAE,CAACuB,SAAS,GAACC,IAAI,EAAEC,IAAI,GAAEd,KAAK,CAAEe,EAAE,CAAEb,CAAC,IAAKA,CAAC,CAACa,EAAE,CAChD,CAAC,CACAJ,KAAK,CAAC,SAAS,EAAEtB,EAAE,CAAC2B,YAAY,CAAC,CAAC,CAACC,MAAM,CAACC,MAAM,CAAC,CAAC,CAClDP,KAAK,CAAC,QAAQ,EAAEtB,EAAE,CAAC8B,aAAa,CAAC,CAAC,CAAC,CACnCR,KAAK,CAAC,QAAQ,EAAEtB,EAAE,CAAC+B,WAAW,CAACvB,KAAK,GAAG,CAAC,EAAEC,MAAM,GAAG,CAAC,CAAC;;IAEtD;IAAA,CACCuB,EAAE,CAAC,MAAM,EAAE,MAAM;MAChB7B,WAAW,CAACgB,OAAO,EAAEX,KAAK,EAAEC,MAAM,EAAEK,KAAK,EAAEH,KAAK,CAAC;IACnD,CAAC,CAAC;EACN,CAAC,EAAE,CAACH,KAAK,EAAEC,MAAM,EAAEK,KAAK,EAAEH,KAAK,CAAC,CAAC;EAEjC,oBACEL,OAAA;IAAA2B,QAAA,eACE3B,OAAA;MACE4B,GAAG,EAAEnB,SAAU;MACfoB,KAAK,EAAE;QACL3B,KAAK;QACLC;MACF,CAAE;MACFD,KAAK,EAAEA,KAAM;MACbC,MAAM,EAAEA;IAAO;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC7B,EAAA,CAhDWH,cAAc;AAAAiC,EAAA,GAAdjC,cAAc;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}