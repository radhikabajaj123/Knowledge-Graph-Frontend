{"ast":null,"code":"const drawNetwork = (context, width, height, nodes, links, RADIUS) => {\n  context.clearRect(0, 0, width, height);\n  function drawLine(context, x1, y1, x2, y2) {\n    context.beginPath();\n    context.moveTo(x1, y1);\n    context.lineTo(x2, y2);\n    context.strokeStyle = '#999999';\n    context.stroke();\n  }\n  function drawHead(context, x1, y1, x2, y2) {\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    context.beginPath();\n    context.moveTo(x1 + 0.5 * dy, y1 - 0.5 * dx);\n    context.lineTo(x1 - 0.5 * dy, y1 + 0.5 * dx);\n    context.lineTo(x2, y2);\n    context.closePath();\n    context.fillStyle = '#999999';\n    context.fill();\n  }\n  function drawArrow(context, x1, y1, x2, y2, arrow, filled) {\n    if (arrow == null) {\n      arrow = 0.1;\n    }\n    const t = 1.0 - arrow;\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    const middleX = dx * t + x1;\n    const middleY = dy * t + y1;\n    drawLine(context, x1, y1, middleX, middleY);\n    drawHead(context, middleX, middleY, x2, y2, filled);\n  }\n\n  // Draw the links first\n  links.forEach(link => {\n    drawArrow(context, link.source.x + RADIUS, link.source.y + RADIUS, link.target.x + RADIUS, link.target.y + RADIUS);\n    // context.beginPath();\n    // context.moveTo(link.source.x, link.source.y);\n    // context.lineTo(link.target.x, link.target.y);\n    // context.lineWidth = '2px';\n    // context.strokeStyle = '#999999';\n    // context.stroke();\n  });\n\n  // Draw the nodes\n  nodes.forEach(node => {\n    if (!node.x || !node.y) {\n      return;\n    }\n    context.beginPath();\n    context.moveTo(node.x + RADIUS, node.y);\n    context.arc(node.x, node.y, RADIUS, 0, 2 * Math.PI);\n    context.strokeStyle = '#ff8103';\n    context.lineWidth = 7;\n    context.stroke();\n    context.fillStyle = '#fc9f42';\n    context.fill();\n    context.fillStyle = '#292929';\n    context.font = \"bolder 10px serif\";\n    context.textAlign = 'center';\n    context.fillText(node.properties.neo4jImportId, node.x, node.y);\n  });\n};\nexport default drawNetwork;","map":{"version":3,"names":["drawNetwork","context","width","height","nodes","links","RADIUS","clearRect","drawLine","x1","y1","x2","y2","beginPath","moveTo","lineTo","strokeStyle","stroke","drawHead","dx","dy","closePath","fillStyle","fill","drawArrow","arrow","filled","t","middleX","middleY","forEach","link","source","x","y","target","node","arc","Math","PI","lineWidth","font","textAlign","fillText","properties","neo4jImportId"],"sources":["/Users/radhika.bajaj/Documents/GitHub/Knowledge-Graph-Frontend/src/components/DrawNetwork.js"],"sourcesContent":["const drawNetwork = (context, width, height, nodes, links, RADIUS) => {\n  context.clearRect(0, 0, width, height);\n\n  function drawLine(context, x1, y1, x2, y2) {\n    context.beginPath();\n    context.moveTo(x1, y1);\n    context.lineTo(x2, y2);\n    context.strokeStyle = '#999999';\n    context.stroke();\n  }\n\n  function drawHead(context, x1, y1, x2, y2) {\n    const dx = x2 -x1;\n    const dy = y2 - y1;\n    context.beginPath();\n    context.moveTo(x1 + 0.5 * dy, y1 - 0.5 * dx);\n    context.lineTo(x1 - 0.5 * dy, y1 + 0.5 * dx);\n    context.lineTo(x2, y2);\n    context.closePath();\n    context.fillStyle = '#999999';\n    context.fill();\n  }\n\n  function drawArrow(context, x1, y1, x2, y2, arrow, filled) {\n        if (arrow == null) {\n        arrow = 0.1;\n        }\n        const t = 1.0 - arrow;\n        const dx = x2 - x1;\n        const dy = y2 - y1;\n        const middleX = dx * t + x1;\n        const middleY = dy * t + y1;\n        drawLine(context, x1, y1, middleX, middleY);\n        drawHead(context, middleX, middleY, x2, y2, filled);\n    }\n\n  // Draw the links first\n  links.forEach((link) => {\n    drawArrow(context, link.source.x+RADIUS, link.source.y+RADIUS, link.target.x+RADIUS, link.target.y+RADIUS);\n    // context.beginPath();\n    // context.moveTo(link.source.x, link.source.y);\n    // context.lineTo(link.target.x, link.target.y);\n    // context.lineWidth = '2px';\n    // context.strokeStyle = '#999999';\n    // context.stroke();\n  });\n\n  // Draw the nodes\n  nodes.forEach((node) => {\n    if (!node.x || !node.y) {\n      return;\n    }\n\n    context.beginPath();\n    context.moveTo(node.x + RADIUS, node.y);\n    context.arc(node.x, node.y, RADIUS, 0, 2 * Math.PI);\n    context.strokeStyle = '#ff8103';\n    context.lineWidth = 7;\n    context.stroke();\n    context.fillStyle = '#fc9f42';\n    context.fill();\n    context.fillStyle = '#292929';\n    context.font = \"bolder 10px serif\";\n    context.textAlign = 'center';\n    context.fillText(node.properties.neo4jImportId, node.x, node.y);\n  });\n};\n\nexport default drawNetwork;"],"mappings":"AAAA,MAAMA,WAAW,GAAGA,CAACC,OAAO,EAAEC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAEC,MAAM,KAAK;EACpEL,OAAO,CAACM,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEL,KAAK,EAAEC,MAAM,CAAC;EAEtC,SAASK,QAAQA,CAACP,OAAO,EAAEQ,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE;IACzCX,OAAO,CAACY,SAAS,CAAC,CAAC;IACnBZ,OAAO,CAACa,MAAM,CAACL,EAAE,EAAEC,EAAE,CAAC;IACtBT,OAAO,CAACc,MAAM,CAACJ,EAAE,EAAEC,EAAE,CAAC;IACtBX,OAAO,CAACe,WAAW,GAAG,SAAS;IAC/Bf,OAAO,CAACgB,MAAM,CAAC,CAAC;EAClB;EAEA,SAASC,QAAQA,CAACjB,OAAO,EAAEQ,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE;IACzC,MAAMO,EAAE,GAAGR,EAAE,GAAEF,EAAE;IACjB,MAAMW,EAAE,GAAGR,EAAE,GAAGF,EAAE;IAClBT,OAAO,CAACY,SAAS,CAAC,CAAC;IACnBZ,OAAO,CAACa,MAAM,CAACL,EAAE,GAAG,GAAG,GAAGW,EAAE,EAAEV,EAAE,GAAG,GAAG,GAAGS,EAAE,CAAC;IAC5ClB,OAAO,CAACc,MAAM,CAACN,EAAE,GAAG,GAAG,GAAGW,EAAE,EAAEV,EAAE,GAAG,GAAG,GAAGS,EAAE,CAAC;IAC5ClB,OAAO,CAACc,MAAM,CAACJ,EAAE,EAAEC,EAAE,CAAC;IACtBX,OAAO,CAACoB,SAAS,CAAC,CAAC;IACnBpB,OAAO,CAACqB,SAAS,GAAG,SAAS;IAC7BrB,OAAO,CAACsB,IAAI,CAAC,CAAC;EAChB;EAEA,SAASC,SAASA,CAACvB,OAAO,EAAEQ,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEa,KAAK,EAAEC,MAAM,EAAE;IACrD,IAAID,KAAK,IAAI,IAAI,EAAE;MACnBA,KAAK,GAAG,GAAG;IACX;IACA,MAAME,CAAC,GAAG,GAAG,GAAGF,KAAK;IACrB,MAAMN,EAAE,GAAGR,EAAE,GAAGF,EAAE;IAClB,MAAMW,EAAE,GAAGR,EAAE,GAAGF,EAAE;IAClB,MAAMkB,OAAO,GAAGT,EAAE,GAAGQ,CAAC,GAAGlB,EAAE;IAC3B,MAAMoB,OAAO,GAAGT,EAAE,GAAGO,CAAC,GAAGjB,EAAE;IAC3BF,QAAQ,CAACP,OAAO,EAAEQ,EAAE,EAAEC,EAAE,EAAEkB,OAAO,EAAEC,OAAO,CAAC;IAC3CX,QAAQ,CAACjB,OAAO,EAAE2B,OAAO,EAAEC,OAAO,EAAElB,EAAE,EAAEC,EAAE,EAAEc,MAAM,CAAC;EACvD;;EAEF;EACArB,KAAK,CAACyB,OAAO,CAAEC,IAAI,IAAK;IACtBP,SAAS,CAACvB,OAAO,EAAE8B,IAAI,CAACC,MAAM,CAACC,CAAC,GAAC3B,MAAM,EAAEyB,IAAI,CAACC,MAAM,CAACE,CAAC,GAAC5B,MAAM,EAAEyB,IAAI,CAACI,MAAM,CAACF,CAAC,GAAC3B,MAAM,EAAEyB,IAAI,CAACI,MAAM,CAACD,CAAC,GAAC5B,MAAM,CAAC;IAC1G;IACA;IACA;IACA;IACA;IACA;EACF,CAAC,CAAC;;EAEF;EACAF,KAAK,CAAC0B,OAAO,CAAEM,IAAI,IAAK;IACtB,IAAI,CAACA,IAAI,CAACH,CAAC,IAAI,CAACG,IAAI,CAACF,CAAC,EAAE;MACtB;IACF;IAEAjC,OAAO,CAACY,SAAS,CAAC,CAAC;IACnBZ,OAAO,CAACa,MAAM,CAACsB,IAAI,CAACH,CAAC,GAAG3B,MAAM,EAAE8B,IAAI,CAACF,CAAC,CAAC;IACvCjC,OAAO,CAACoC,GAAG,CAACD,IAAI,CAACH,CAAC,EAAEG,IAAI,CAACF,CAAC,EAAE5B,MAAM,EAAE,CAAC,EAAE,CAAC,GAAGgC,IAAI,CAACC,EAAE,CAAC;IACnDtC,OAAO,CAACe,WAAW,GAAG,SAAS;IAC/Bf,OAAO,CAACuC,SAAS,GAAG,CAAC;IACrBvC,OAAO,CAACgB,MAAM,CAAC,CAAC;IAChBhB,OAAO,CAACqB,SAAS,GAAG,SAAS;IAC7BrB,OAAO,CAACsB,IAAI,CAAC,CAAC;IACdtB,OAAO,CAACqB,SAAS,GAAG,SAAS;IAC7BrB,OAAO,CAACwC,IAAI,GAAG,mBAAmB;IAClCxC,OAAO,CAACyC,SAAS,GAAG,QAAQ;IAC5BzC,OAAO,CAAC0C,QAAQ,CAACP,IAAI,CAACQ,UAAU,CAACC,aAAa,EAAET,IAAI,CAACH,CAAC,EAAEG,IAAI,CAACF,CAAC,CAAC;EACjE,CAAC,CAAC;AACJ,CAAC;AAED,eAAelC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}