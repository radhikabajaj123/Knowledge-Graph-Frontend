{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useRef, useState, useEffect } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\nconst initialState = {\n  width: 0,\n  height: 0\n};\n//  ref is the reference to the element whose height and with is required\n//  const divRef = useRef(null);\n//  const { height, width } = useDimension(divRef);\n//  <div ref={divRef}>\nconst useDimension = ref => {\n  _s();\n  const [dimensions, setdDimensions] = useState(initialState);\n  const resizeObserverRef = useRef(null);\n  useEffect(() => {\n    resizeObserverRef.current = new ResizeObserver((entries = []) => {\n      entries.forEach(entry => {\n        const {\n          width,\n          height\n        } = entry.contentRect;\n        setdDimensions({\n          width,\n          height\n        });\n      });\n    });\n    if (ref.current) resizeObserverRef.current.observe(ref.current);\n    return () => {\n      if (resizeObserverRef.current) resizeObserverRef.current.disconnect();\n    };\n  }, [ref]);\n  return dimensions;\n};\n_s(useDimension, \"5a1r17SGX7fx21pUfRxj62JoqNA=\");\nexport default useDimension;","map":{"version":3,"names":["useRef","useState","useEffect","ResizeObserver","initialState","width","height","useDimension","ref","_s","dimensions","setdDimensions","resizeObserverRef","current","entries","forEach","entry","contentRect","observe","disconnect"],"sources":["/Users/radhika.bajaj/Documents/GitHub/Knowledge-Graph-Frontend/src/components/useDimension.js"],"sourcesContent":["import { useRef, useState, useEffect } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nconst initialState = { width: 0, height: 0 };\n//  ref is the reference to the element whose height and with is required\n//  const divRef = useRef(null);\n//  const { height, width } = useDimension(divRef);\n//  <div ref={divRef}>\nconst useDimension = (ref) => {\n  const [dimensions, setdDimensions] = useState(initialState);\n  const resizeObserverRef = useRef(null);\n\n  useEffect(() => {\n    resizeObserverRef.current = new ResizeObserver((entries = []) => {\n      entries.forEach((entry) => {\n        const { width, height } = entry.contentRect;\n        setdDimensions({ width, height });\n      });\n    });\n    if (ref.current) resizeObserverRef.current.observe(ref.current);\n    return () => {\n      if (resizeObserverRef.current) resizeObserverRef.current.disconnect();\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nexport default useDimension;"],"mappings":";AAAA,SAASA,MAAM,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACnD,OAAOC,cAAc,MAAM,0BAA0B;AAErD,MAAMC,YAAY,GAAG;EAAEC,KAAK,EAAE,CAAC;EAAEC,MAAM,EAAE;AAAE,CAAC;AAC5C;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAIC,GAAG,IAAK;EAAAC,EAAA;EAC5B,MAAM,CAACC,UAAU,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAACG,YAAY,CAAC;EAC3D,MAAMQ,iBAAiB,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAEtCE,SAAS,CAAC,MAAM;IACdU,iBAAiB,CAACC,OAAO,GAAG,IAAIV,cAAc,CAAC,CAACW,OAAO,GAAG,EAAE,KAAK;MAC/DA,OAAO,CAACC,OAAO,CAAEC,KAAK,IAAK;QACzB,MAAM;UAAEX,KAAK;UAAEC;QAAO,CAAC,GAAGU,KAAK,CAACC,WAAW;QAC3CN,cAAc,CAAC;UAAEN,KAAK;UAAEC;QAAO,CAAC,CAAC;MACnC,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,IAAIE,GAAG,CAACK,OAAO,EAAED,iBAAiB,CAACC,OAAO,CAACK,OAAO,CAACV,GAAG,CAACK,OAAO,CAAC;IAC/D,OAAO,MAAM;MACX,IAAID,iBAAiB,CAACC,OAAO,EAAED,iBAAiB,CAACC,OAAO,CAACM,UAAU,CAAC,CAAC;IACvE,CAAC;EACH,CAAC,EAAE,CAACX,GAAG,CAAC,CAAC;EACT,OAAOE,UAAU;AACnB,CAAC;AAACD,EAAA,CAjBIF,YAAY;AAmBlB,eAAeA,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}